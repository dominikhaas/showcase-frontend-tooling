// This file is auto-generated by @hey-api/openapi-ts

export type LoginUser = {
    email: string;
    password: string;
};

export type NewUser = {
    username: string;
    email: string;
    password: string;
};

export type User = {
    email: string;
    token: string;
    username: string;
    bio: string;
    image: string;
};

export type UpdateUser = {
    email?: string;
    password?: string;
    username?: string;
    bio?: string;
    image?: string;
};

export type Profile = {
    username: string;
    bio: string;
    image: string;
    following: boolean;
};

export type Article = {
    slug: string;
    title: string;
    description: string;
    body: string;
    tagList: Array<string>;
    createdAt: string;
    updatedAt: string;
    favorited: boolean;
    favoritesCount: number;
    author: Profile;
};

export type NewArticle = {
    title: string;
    description: string;
    body: string;
    tagList?: Array<string>;
};

export type UpdateArticle = {
    title?: string;
    description?: string;
    body?: string;
};

export type Comment = {
    id: number;
    createdAt: string;
    updatedAt: string;
    body: string;
    author: Profile;
};

export type NewComment = {
    body: string;
};

export type GenericErrorModel = {
    errors: {
        body: Array<string>;
    };
};

/**
 * The number of items to skip before starting to collect the result set.
 */
export type OffsetParam = number;

/**
 * The numbers of items to return.
 */
export type LimitParam = number;

/**
 * Credentials to use
 */
export type LoginUserRequest = {
    user: LoginUser;
};

/**
 * Details of the new user to register
 */
export type NewUserRequest = {
    user: NewUser;
};

/**
 * User details to update. At least **one** field is required.
 */
export type UpdateUserRequest = {
    user: UpdateUser;
};

/**
 * Article to create
 */
export type NewArticleRequest = {
    article: NewArticle;
};

/**
 * Article to update
 */
export type UpdateArticleRequest = {
    article: UpdateArticle;
};

/**
 * Comment you want to create
 */
export type NewCommentRequest = {
    comment: NewComment;
};

export type LoginData = {
    /**
     * Credentials to use
     */
    body: LoginUserRequest;
    path?: never;
    query?: never;
    url: '/users/login';
};

export type LoginErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
    /**
     * User
     */
    200: {
        user: User;
    };
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type CreateUserData = {
    /**
     * Details of the new user to register
     */
    body: NewUserRequest;
    path?: never;
    query?: never;
    url: '/users';
};

export type CreateUserErrors = {
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * User
     */
    201: {
        user: User;
    };
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type GetCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user';
};

export type GetCurrentUserErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type GetCurrentUserError = GetCurrentUserErrors[keyof GetCurrentUserErrors];

export type GetCurrentUserResponses = {
    /**
     * User
     */
    200: {
        user: User;
    };
};

export type GetCurrentUserResponse = GetCurrentUserResponses[keyof GetCurrentUserResponses];

export type UpdateCurrentUserData = {
    /**
     * User details to update. At least **one** field is required.
     */
    body: UpdateUserRequest;
    path?: never;
    query?: never;
    url: '/user';
};

export type UpdateCurrentUserErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type UpdateCurrentUserError = UpdateCurrentUserErrors[keyof UpdateCurrentUserErrors];

export type UpdateCurrentUserResponses = {
    /**
     * User
     */
    200: {
        user: User;
    };
};

export type UpdateCurrentUserResponse = UpdateCurrentUserResponses[keyof UpdateCurrentUserResponses];

export type GetProfileByUsernameData = {
    body?: never;
    path: {
        /**
         * Username of the profile to get
         */
        username: string;
    };
    query?: never;
    url: '/profiles/{username}';
};

export type GetProfileByUsernameErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type GetProfileByUsernameError = GetProfileByUsernameErrors[keyof GetProfileByUsernameErrors];

export type GetProfileByUsernameResponses = {
    /**
     * Profile
     */
    200: {
        profile: Profile;
    };
};

export type GetProfileByUsernameResponse = GetProfileByUsernameResponses[keyof GetProfileByUsernameResponses];

export type UnfollowUserByUsernameData = {
    body?: never;
    path: {
        /**
         * Username of the profile you want to unfollow
         */
        username: string;
    };
    query?: never;
    url: '/profiles/{username}/follow';
};

export type UnfollowUserByUsernameErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type UnfollowUserByUsernameError = UnfollowUserByUsernameErrors[keyof UnfollowUserByUsernameErrors];

export type UnfollowUserByUsernameResponses = {
    /**
     * Profile
     */
    200: {
        profile: Profile;
    };
};

export type UnfollowUserByUsernameResponse = UnfollowUserByUsernameResponses[keyof UnfollowUserByUsernameResponses];

export type FollowUserByUsernameData = {
    body?: never;
    path: {
        /**
         * Username of the profile you want to follow
         */
        username: string;
    };
    query?: never;
    url: '/profiles/{username}/follow';
};

export type FollowUserByUsernameErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type FollowUserByUsernameError = FollowUserByUsernameErrors[keyof FollowUserByUsernameErrors];

export type FollowUserByUsernameResponses = {
    /**
     * Profile
     */
    200: {
        profile: Profile;
    };
};

export type FollowUserByUsernameResponse = FollowUserByUsernameResponses[keyof FollowUserByUsernameResponses];

export type GetArticlesFeedData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The number of items to skip before starting to collect the result set.
         */
        offset?: number;
        /**
         * The numbers of items to return.
         */
        limit?: number;
    };
    url: '/articles/feed';
};

export type GetArticlesFeedErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type GetArticlesFeedError = GetArticlesFeedErrors[keyof GetArticlesFeedErrors];

export type GetArticlesFeedResponses = {
    /**
     * Multiple articles
     */
    200: {
        articles: Array<{
            slug: string;
            title: string;
            description: string;
            tagList: Array<string>;
            createdAt: string;
            updatedAt: string;
            favorited: boolean;
            favoritesCount: number;
            author: Profile;
        }>;
        articlesCount: number;
    };
};

export type GetArticlesFeedResponse = GetArticlesFeedResponses[keyof GetArticlesFeedResponses];

export type GetArticlesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by tag
         */
        tag?: string;
        /**
         * Filter by author (username)
         */
        author?: string;
        /**
         * Filter by favorites of a user (username)
         */
        favorited?: string;
        /**
         * The number of items to skip before starting to collect the result set.
         */
        offset?: number;
        /**
         * The numbers of items to return.
         */
        limit?: number;
    };
    url: '/articles';
};

export type GetArticlesErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type GetArticlesError = GetArticlesErrors[keyof GetArticlesErrors];

export type GetArticlesResponses = {
    /**
     * Multiple articles
     */
    200: {
        articles: Array<{
            slug: string;
            title: string;
            description: string;
            tagList: Array<string>;
            createdAt: string;
            updatedAt: string;
            favorited: boolean;
            favoritesCount: number;
            author: Profile;
        }>;
        articlesCount: number;
    };
};

export type GetArticlesResponse = GetArticlesResponses[keyof GetArticlesResponses];

export type CreateArticleData = {
    /**
     * Article to create
     */
    body: NewArticleRequest;
    path?: never;
    query?: never;
    url: '/articles';
};

export type CreateArticleErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type CreateArticleError = CreateArticleErrors[keyof CreateArticleErrors];

export type CreateArticleResponses = {
    /**
     * Single article
     */
    201: {
        article: Article;
    };
};

export type CreateArticleResponse = CreateArticleResponses[keyof CreateArticleResponses];

export type DeleteArticleData = {
    body?: never;
    path: {
        /**
         * Slug of the article to delete
         */
        slug: string;
    };
    query?: never;
    url: '/articles/{slug}';
};

export type DeleteArticleErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type DeleteArticleError = DeleteArticleErrors[keyof DeleteArticleErrors];

export type DeleteArticleResponses = {
    /**
     * No content
     */
    200: unknown;
};

export type GetArticleData = {
    body?: never;
    path: {
        /**
         * Slug of the article to get
         */
        slug: string;
    };
    query?: never;
    url: '/articles/{slug}';
};

export type GetArticleErrors = {
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type GetArticleError = GetArticleErrors[keyof GetArticleErrors];

export type GetArticleResponses = {
    /**
     * Single article
     */
    200: {
        article: Article;
    };
};

export type GetArticleResponse = GetArticleResponses[keyof GetArticleResponses];

export type UpdateArticleData = {
    /**
     * Article to update
     */
    body: UpdateArticleRequest;
    path: {
        /**
         * Slug of the article to update
         */
        slug: string;
    };
    query?: never;
    url: '/articles/{slug}';
};

export type UpdateArticleErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type UpdateArticleError = UpdateArticleErrors[keyof UpdateArticleErrors];

export type UpdateArticleResponses = {
    /**
     * Single article
     */
    200: {
        article: Article;
    };
};

export type UpdateArticleResponse = UpdateArticleResponses[keyof UpdateArticleResponses];

export type GetArticleCommentsData = {
    body?: never;
    path: {
        /**
         * Slug of the article that you want to get comments for
         */
        slug: string;
    };
    query?: never;
    url: '/articles/{slug}/comments';
};

export type GetArticleCommentsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type GetArticleCommentsError = GetArticleCommentsErrors[keyof GetArticleCommentsErrors];

export type GetArticleCommentsResponses = {
    /**
     * Multiple comments
     */
    200: {
        comments: Array<Comment>;
    };
};

export type GetArticleCommentsResponse = GetArticleCommentsResponses[keyof GetArticleCommentsResponses];

export type CreateArticleCommentData = {
    /**
     * Comment you want to create
     */
    body: NewCommentRequest;
    path: {
        /**
         * Slug of the article that you want to create a comment for
         */
        slug: string;
    };
    query?: never;
    url: '/articles/{slug}/comments';
};

export type CreateArticleCommentErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type CreateArticleCommentError = CreateArticleCommentErrors[keyof CreateArticleCommentErrors];

export type CreateArticleCommentResponses = {
    /**
     * Single comment
     */
    200: {
        comment: Comment;
    };
};

export type CreateArticleCommentResponse = CreateArticleCommentResponses[keyof CreateArticleCommentResponses];

export type DeleteArticleCommentData = {
    body?: never;
    path: {
        /**
         * Slug of the article that you want to delete a comment for
         */
        slug: string;
        /**
         * ID of the comment you want to delete
         */
        id: number;
    };
    query?: never;
    url: '/articles/{slug}/comments/{id}';
};

export type DeleteArticleCommentErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type DeleteArticleCommentError = DeleteArticleCommentErrors[keyof DeleteArticleCommentErrors];

export type DeleteArticleCommentResponses = {
    /**
     * No content
     */
    200: unknown;
};

export type DeleteArticleFavoriteData = {
    body?: never;
    path: {
        /**
         * Slug of the article that you want to unfavorite
         */
        slug: string;
    };
    query?: never;
    url: '/articles/{slug}/favorite';
};

export type DeleteArticleFavoriteErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type DeleteArticleFavoriteError = DeleteArticleFavoriteErrors[keyof DeleteArticleFavoriteErrors];

export type DeleteArticleFavoriteResponses = {
    /**
     * Single article
     */
    200: {
        article: Article;
    };
};

export type DeleteArticleFavoriteResponse = DeleteArticleFavoriteResponses[keyof DeleteArticleFavoriteResponses];

export type CreateArticleFavoriteData = {
    body?: never;
    path: {
        /**
         * Slug of the article that you want to favorite
         */
        slug: string;
    };
    query?: never;
    url: '/articles/{slug}/favorite';
};

export type CreateArticleFavoriteErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type CreateArticleFavoriteError = CreateArticleFavoriteErrors[keyof CreateArticleFavoriteErrors];

export type CreateArticleFavoriteResponses = {
    /**
     * Single article
     */
    200: {
        article: Article;
    };
};

export type CreateArticleFavoriteResponse = CreateArticleFavoriteResponses[keyof CreateArticleFavoriteResponses];

export type GetTagsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/tags';
};

export type GetTagsErrors = {
    /**
     * Unexpected error
     */
    422: GenericErrorModel;
};

export type GetTagsError = GetTagsErrors[keyof GetTagsErrors];

export type GetTagsResponses = {
    /**
     * Tags
     */
    200: {
        tags: Array<string>;
    };
};

export type GetTagsResponse = GetTagsResponses[keyof GetTagsResponses];

export type ClientOptions = {
    baseUrl: 'https://api.realworld.io/api' | (string & {});
};