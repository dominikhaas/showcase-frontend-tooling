// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { LoginData, LoginResponse, LoginError, CreateUserData, CreateUserResponse, CreateUserError, GetCurrentUserData, GetCurrentUserResponse, GetCurrentUserError, UpdateCurrentUserData, UpdateCurrentUserResponse, UpdateCurrentUserError, GetProfileByUsernameData, GetProfileByUsernameResponse, GetProfileByUsernameError, UnfollowUserByUsernameData, UnfollowUserByUsernameResponse, UnfollowUserByUsernameError, FollowUserByUsernameData, FollowUserByUsernameResponse, FollowUserByUsernameError, GetArticlesFeedData, GetArticlesFeedResponse, GetArticlesFeedError, GetArticlesData, GetArticlesResponse, GetArticlesError, CreateArticleData, CreateArticleResponse, CreateArticleError, DeleteArticleData, DeleteArticleError, GetArticleData, GetArticleResponse, GetArticleError, UpdateArticleData, UpdateArticleResponse, UpdateArticleError, GetArticleCommentsData, GetArticleCommentsResponse, GetArticleCommentsError, CreateArticleCommentData, CreateArticleCommentResponse, CreateArticleCommentError, DeleteArticleCommentData, DeleteArticleCommentError, DeleteArticleFavoriteData, DeleteArticleFavoriteResponse, DeleteArticleFavoriteError, CreateArticleFavoriteData, CreateArticleFavoriteResponse, CreateArticleFavoriteError, GetTagsData, GetTagsResponse, GetTagsError } from './types.gen';
import { zLoginResponse, zCreateUserResponse, zGetCurrentUserResponse, zUpdateCurrentUserResponse, zGetProfileByUsernameResponse, zUnfollowUserByUsernameResponse, zFollowUserByUsernameResponse, zGetArticlesFeedResponse, zGetArticlesResponse, zCreateArticleResponse, zGetArticleResponse, zUpdateArticleResponse, zGetArticleCommentsResponse, zCreateArticleCommentResponse, zDeleteArticleFavoriteResponse, zCreateArticleFavoriteResponse, zGetTagsResponse } from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Existing user login
 * Login for existing user
 */
export const login = <ThrowOnError extends boolean = true>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponse, LoginError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zLoginResponse.parseAsync(data);
        },
        url: '/users/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register a new user
 */
export const createUser = <ThrowOnError extends boolean = true>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zCreateUserResponse.parseAsync(data);
        },
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get current user
 * Gets the currently logged-in user
 */
export const getCurrentUser = <ThrowOnError extends boolean = true>(options?: Options<GetCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserResponse, GetCurrentUserError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetCurrentUserResponse.parseAsync(data);
        },
        url: '/user',
        ...options
    });
};

/**
 * Update current user
 * Updated user information for current user
 */
export const updateCurrentUser = <ThrowOnError extends boolean = true>(options: Options<UpdateCurrentUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCurrentUserResponse, UpdateCurrentUserError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zUpdateCurrentUserResponse.parseAsync(data);
        },
        url: '/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a profile
 * Get a profile of a user of the system. Auth is optional
 */
export const getProfileByUsername = <ThrowOnError extends boolean = true>(options: Options<GetProfileByUsernameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProfileByUsernameResponse, GetProfileByUsernameError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetProfileByUsernameResponse.parseAsync(data);
        },
        url: '/profiles/{username}',
        ...options
    });
};

/**
 * Unfollow a user
 * Unfollow a user by username
 */
export const unfollowUserByUsername = <ThrowOnError extends boolean = true>(options: Options<UnfollowUserByUsernameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UnfollowUserByUsernameResponse, UnfollowUserByUsernameError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zUnfollowUserByUsernameResponse.parseAsync(data);
        },
        url: '/profiles/{username}/follow',
        ...options
    });
};

/**
 * Follow a user
 * Follow a user by username
 */
export const followUserByUsername = <ThrowOnError extends boolean = true>(options: Options<FollowUserByUsernameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FollowUserByUsernameResponse, FollowUserByUsernameError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zFollowUserByUsernameResponse.parseAsync(data);
        },
        url: '/profiles/{username}/follow',
        ...options
    });
};

/**
 * Get recent articles from users you follow
 * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
 */
export const getArticlesFeed = <ThrowOnError extends boolean = true>(options?: Options<GetArticlesFeedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetArticlesFeedResponse, GetArticlesFeedError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetArticlesFeedResponse.parseAsync(data);
        },
        url: '/articles/feed',
        ...options
    });
};

/**
 * Get recent articles globally
 * Get most recent articles globally. Use query parameters to filter results. Auth is optional
 */
export const getArticles = <ThrowOnError extends boolean = true>(options?: Options<GetArticlesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetArticlesResponse, GetArticlesError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetArticlesResponse.parseAsync(data);
        },
        url: '/articles',
        ...options
    });
};

/**
 * Create an article
 * Create an article. Auth is required
 */
export const createArticle = <ThrowOnError extends boolean = true>(options: Options<CreateArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateArticleResponse, CreateArticleError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zCreateArticleResponse.parseAsync(data);
        },
        url: '/articles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an article
 * Delete an article. Auth is required
 */
export const deleteArticle = <ThrowOnError extends boolean = true>(options: Options<DeleteArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteArticleError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/articles/{slug}',
        ...options
    });
};

/**
 * Get an article
 * Get an article. Auth not required
 */
export const getArticle = <ThrowOnError extends boolean = true>(options: Options<GetArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArticleResponse, GetArticleError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetArticleResponse.parseAsync(data);
        },
        url: '/articles/{slug}',
        ...options
    });
};

/**
 * Update an article
 * Update an article. Auth is required
 */
export const updateArticle = <ThrowOnError extends boolean = true>(options: Options<UpdateArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateArticleResponse, UpdateArticleError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zUpdateArticleResponse.parseAsync(data);
        },
        url: '/articles/{slug}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get comments for an article
 * Get the comments for an article. Auth is optional
 */
export const getArticleComments = <ThrowOnError extends boolean = true>(options: Options<GetArticleCommentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArticleCommentsResponse, GetArticleCommentsError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetArticleCommentsResponse.parseAsync(data);
        },
        url: '/articles/{slug}/comments',
        ...options
    });
};

/**
 * Create a comment for an article
 * Create a comment for an article. Auth is required
 */
export const createArticleComment = <ThrowOnError extends boolean = true>(options: Options<CreateArticleCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateArticleCommentResponse, CreateArticleCommentError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zCreateArticleCommentResponse.parseAsync(data);
        },
        url: '/articles/{slug}/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a comment for an article
 * Delete a comment for an article. Auth is required
 */
export const deleteArticleComment = <ThrowOnError extends boolean = true>(options: Options<DeleteArticleCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteArticleCommentError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/articles/{slug}/comments/{id}',
        ...options
    });
};

/**
 * Unfavorite an article
 * Unfavorite an article. Auth is required
 */
export const deleteArticleFavorite = <ThrowOnError extends boolean = true>(options: Options<DeleteArticleFavoriteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteArticleFavoriteResponse, DeleteArticleFavoriteError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zDeleteArticleFavoriteResponse.parseAsync(data);
        },
        url: '/articles/{slug}/favorite',
        ...options
    });
};

/**
 * Favorite an article
 * Favorite an article. Auth is required
 */
export const createArticleFavorite = <ThrowOnError extends boolean = true>(options: Options<CreateArticleFavoriteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateArticleFavoriteResponse, CreateArticleFavoriteError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zCreateArticleFavoriteResponse.parseAsync(data);
        },
        url: '/articles/{slug}/favorite',
        ...options
    });
};

/**
 * Get tags
 * Get tags. Auth not required
 */
export const getTags = <ThrowOnError extends boolean = true>(options?: Options<GetTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTagsResponse, GetTagsError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetTagsResponse.parseAsync(data);
        },
        url: '/tags',
        ...options
    });
};